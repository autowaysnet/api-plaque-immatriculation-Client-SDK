/*
 * API Car plate - API Plaque immatriculation
 * Web Service which allows you to query the official database in real time by simply entering a license plate or a VIN. You allow your ecosystem to identify in one click the official data of a vehicle among the 80M license plates in France, Spain, Italy and Portugal.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@auto-ways.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiCarPlateApiPlaqueImmatriculation);
  }
}(this, function(expect, ApiCarPlateApiPlaqueImmatriculation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiCarPlateApiPlaqueImmatriculation.CarInfoApi();
  });

  describe('(package)', function() {
    describe('CarInfoApi', function() {
      describe('getCarByPlateEs', function() {
        it('should call getCarByPlateEs successfully', function(done) {
          // TODO: uncomment, update parameter values for getCarByPlateEs call
          /*
          var opts = {};

          instance.getCarByPlateEs(token, plaque, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCarByPlateFr', function() {
        it('should call getCarByPlateFr successfully', function(done) {
          // TODO: uncomment, update parameter values for getCarByPlateFr call
          /*
          var opts = {};

          instance.getCarByPlateFr(token, plaque, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCarByPlateIt', function() {
        it('should call getCarByPlateIt successfully', function(done) {
          // TODO: uncomment, update parameter values for getCarByPlateIt call
          /*
          var opts = {};

          instance.getCarByPlateIt(token, plaque, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCarByPlatePt', function() {
        it('should call getCarByPlatePt successfully', function(done) {
          // TODO: uncomment, update parameter values for getCarByPlatePt call
          /*
          var opts = {};

          instance.getCarByPlatePt(token, plaque, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCarByVIN', function() {
        it('should call getCarByVIN successfully', function(done) {
          // TODO: uncomment, update parameter values for getCarByVIN call
          /*
          var opts = {};

          instance.getCarByVIN(token, vin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * API Car plate - API Plaque immatriculation
 * Web Service which allows you to query the official database in real time by simply entering a license plate or a VIN. You allow your ecosystem to identify in one click the official data of a vehicle among the 80M license plates in France, Spain, Italy and Portugal.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@auto-ways.net
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://app.auto-ways.net/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * CarInfoApi - fetch parameter creator
 * @export
 */
export const CarInfoApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate  , country  (ES)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlateEs(token: string, plaque: string, outputLang?: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling getCarByPlateEs.');
            }
            // verify required parameter 'plaque' is not null or undefined
            if (plaque === null || plaque === undefined) {
                throw new RequiredError('plaque','Required parameter plaque was null or undefined when calling getCarByPlateEs.');
            }
            const localVarPath = `/v1/es/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (plaque !== undefined) {
                localVarQueryParameter['plaque'] = plaque;
            }

            if (outputLang !== undefined) {
                localVarQueryParameter['output_lang'] = outputLang;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate , country  (FR)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlateFr(token: string, plaque: string, outputLang?: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling getCarByPlateFr.');
            }
            // verify required parameter 'plaque' is not null or undefined
            if (plaque === null || plaque === undefined) {
                throw new RequiredError('plaque','Required parameter plaque was null or undefined when calling getCarByPlateFr.');
            }
            const localVarPath = `/v1/fr/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (plaque !== undefined) {
                localVarQueryParameter['plaque'] = plaque;
            }

            if (outputLang !== undefined) {
                localVarQueryParameter['output_lang'] = outputLang;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate  , country  (IT)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlateIt(token: string, plaque: string, outputLang?: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling getCarByPlateIt.');
            }
            // verify required parameter 'plaque' is not null or undefined
            if (plaque === null || plaque === undefined) {
                throw new RequiredError('plaque','Required parameter plaque was null or undefined when calling getCarByPlateIt.');
            }
            const localVarPath = `/v1/it/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (plaque !== undefined) {
                localVarQueryParameter['plaque'] = plaque;
            }

            if (outputLang !== undefined) {
                localVarQueryParameter['output_lang'] = outputLang;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate  , country  (PT)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlatePt(token: string, plaque: string, outputLang?: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling getCarByPlatePt.');
            }
            // verify required parameter 'plaque' is not null or undefined
            if (plaque === null || plaque === undefined) {
                throw new RequiredError('plaque','Required parameter plaque was null or undefined when calling getCarByPlatePt.');
            }
            const localVarPath = `/v1/pt/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (plaque !== undefined) {
                localVarQueryParameter['plaque'] = plaque;
            }

            if (outputLang !== undefined) {
                localVarQueryParameter['output_lang'] = outputLang;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by VIN
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} vin  Your VIN (Vehicle Identification Number)
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByVIN(token: string, vin: string, outputLang?: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling getCarByVIN.');
            }
            // verify required parameter 'vin' is not null or undefined
            if (vin === null || vin === undefined) {
                throw new RequiredError('vin','Required parameter vin was null or undefined when calling getCarByVIN.');
            }
            const localVarPath = `/v1/vin/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (vin !== undefined) {
                localVarQueryParameter['vin'] = vin;
            }

            if (outputLang !== undefined) {
                localVarQueryParameter['output_lang'] = outputLang;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarInfoApi - functional programming interface
 * @export
 */
export const CarInfoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate  , country  (ES)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlateEs(token: string, plaque: string, outputLang?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CarInfoApiFetchParamCreator(configuration).getCarByPlateEs(token, plaque, outputLang, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate , country  (FR)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlateFr(token: string, plaque: string, outputLang?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CarInfoApiFetchParamCreator(configuration).getCarByPlateFr(token, plaque, outputLang, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate  , country  (IT)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlateIt(token: string, plaque: string, outputLang?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CarInfoApiFetchParamCreator(configuration).getCarByPlateIt(token, plaque, outputLang, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate  , country  (PT)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlatePt(token: string, plaque: string, outputLang?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CarInfoApiFetchParamCreator(configuration).getCarByPlatePt(token, plaque, outputLang, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by VIN
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} vin  Your VIN (Vehicle Identification Number)
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByVIN(token: string, vin: string, outputLang?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CarInfoApiFetchParamCreator(configuration).getCarByVIN(token, vin, outputLang, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CarInfoApi - factory interface
 * @export
 */
export const CarInfoApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate  , country  (ES)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlateEs(token: string, plaque: string, outputLang?: string, options?: any) {
            return CarInfoApiFp(configuration).getCarByPlateEs(token, plaque, outputLang, options)(fetch, basePath);
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate , country  (FR)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlateFr(token: string, plaque: string, outputLang?: string, options?: any) {
            return CarInfoApiFp(configuration).getCarByPlateFr(token, plaque, outputLang, options)(fetch, basePath);
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate  , country  (IT)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlateIt(token: string, plaque: string, outputLang?: string, options?: any) {
            return CarInfoApiFp(configuration).getCarByPlateIt(token, plaque, outputLang, options)(fetch, basePath);
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by plate  , country  (PT)
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} plaque car plate 
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByPlatePt(token: string, plaque: string, outputLang?: string, options?: any) {
            return CarInfoApiFp(configuration).getCarByPlatePt(token, plaque, outputLang, options)(fetch, basePath);
        },
        /**
         * Return vehicle data from license plate
         * @summary Find car by VIN
         * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
         * @param {string} vin  Your VIN (Vehicle Identification Number)
         * @param {string} [outputLang] Define the API output language (fr,en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarByVIN(token: string, vin: string, outputLang?: string, options?: any) {
            return CarInfoApiFp(configuration).getCarByVIN(token, vin, outputLang, options)(fetch, basePath);
        },
    };
};

/**
 * CarInfoApi - object-oriented interface
 * @export
 * @class CarInfoApi
 * @extends {BaseAPI}
 */
export class CarInfoApi extends BaseAPI {
    /**
     * Return vehicle data from license plate
     * @summary Find car by plate  , country  (ES)
     * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param {string} plaque car plate 
     * @param {string} [outputLang] Define the API output language (fr,en)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarInfoApi
     */
    public getCarByPlateEs(token: string, plaque: string, outputLang?: string, options?: any) {
        return CarInfoApiFp(this.configuration).getCarByPlateEs(token, plaque, outputLang, options)(this.fetch, this.basePath);
    }

    /**
     * Return vehicle data from license plate
     * @summary Find car by plate , country  (FR)
     * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param {string} plaque car plate 
     * @param {string} [outputLang] Define the API output language (fr,en)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarInfoApi
     */
    public getCarByPlateFr(token: string, plaque: string, outputLang?: string, options?: any) {
        return CarInfoApiFp(this.configuration).getCarByPlateFr(token, plaque, outputLang, options)(this.fetch, this.basePath);
    }

    /**
     * Return vehicle data from license plate
     * @summary Find car by plate  , country  (IT)
     * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param {string} plaque car plate 
     * @param {string} [outputLang] Define the API output language (fr,en)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarInfoApi
     */
    public getCarByPlateIt(token: string, plaque: string, outputLang?: string, options?: any) {
        return CarInfoApiFp(this.configuration).getCarByPlateIt(token, plaque, outputLang, options)(this.fetch, this.basePath);
    }

    /**
     * Return vehicle data from license plate
     * @summary Find car by plate  , country  (PT)
     * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param {string} plaque car plate 
     * @param {string} [outputLang] Define the API output language (fr,en)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarInfoApi
     */
    public getCarByPlatePt(token: string, plaque: string, outputLang?: string, options?: any) {
        return CarInfoApiFp(this.configuration).getCarByPlatePt(token, plaque, outputLang, options)(this.fetch, this.basePath);
    }

    /**
     * Return vehicle data from license plate
     * @summary Find car by VIN
     * @param {string} token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param {string} vin  Your VIN (Vehicle Identification Number)
     * @param {string} [outputLang] Define the API output language (fr,en)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarInfoApi
     */
    public getCarByVIN(token: string, vin: string, outputLang?: string, options?: any) {
        return CarInfoApiFp(this.configuration).getCarByVIN(token, vin, outputLang, options)(this.fetch, this.basePath);
    }

}

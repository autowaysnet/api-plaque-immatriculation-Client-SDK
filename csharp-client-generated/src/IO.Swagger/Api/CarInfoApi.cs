/* 
 * API Car plate - API Plaque immatriculation
 *
 * Web Service which allows you to query the official database in real time by simply entering a license plate or a VIN. You allow your ecosystem to identify in one click the official data of a vehicle among the 80M license plates in France, Spain, Italy and Portugal.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@auto-ways.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICarInfoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find car by plate  , country  (ES)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        void GetCarByPlateEs (string token, string plaque, string outputLang = null);

        /// <summary>
        /// Find car by plate  , country  (ES)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCarByPlateEsWithHttpInfo (string token, string plaque, string outputLang = null);
        /// <summary>
        /// Find car by plate , country  (FR)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        void GetCarByPlateFr (string token, string plaque, string outputLang = null);

        /// <summary>
        /// Find car by plate , country  (FR)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCarByPlateFrWithHttpInfo (string token, string plaque, string outputLang = null);
        /// <summary>
        /// Find car by plate  , country  (IT)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        void GetCarByPlateIt (string token, string plaque, string outputLang = null);

        /// <summary>
        /// Find car by plate  , country  (IT)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCarByPlateItWithHttpInfo (string token, string plaque, string outputLang = null);
        /// <summary>
        /// Find car by plate  , country  (PT)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        void GetCarByPlatePt (string token, string plaque, string outputLang = null);

        /// <summary>
        /// Find car by plate  , country  (PT)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCarByPlatePtWithHttpInfo (string token, string plaque, string outputLang = null);
        /// <summary>
        /// Find car by VIN
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="vin"> Your VIN (Vehicle Identification Number)</param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        void GetCarByVIN (string token, string vin, string outputLang = null);

        /// <summary>
        /// Find car by VIN
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="vin"> Your VIN (Vehicle Identification Number)</param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCarByVINWithHttpInfo (string token, string vin, string outputLang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find car by plate  , country  (ES)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCarByPlateEsAsync (string token, string plaque, string outputLang = null);

        /// <summary>
        /// Find car by plate  , country  (ES)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByPlateEsAsyncWithHttpInfo (string token, string plaque, string outputLang = null);
        /// <summary>
        /// Find car by plate , country  (FR)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCarByPlateFrAsync (string token, string plaque, string outputLang = null);

        /// <summary>
        /// Find car by plate , country  (FR)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByPlateFrAsyncWithHttpInfo (string token, string plaque, string outputLang = null);
        /// <summary>
        /// Find car by plate  , country  (IT)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCarByPlateItAsync (string token, string plaque, string outputLang = null);

        /// <summary>
        /// Find car by plate  , country  (IT)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByPlateItAsyncWithHttpInfo (string token, string plaque, string outputLang = null);
        /// <summary>
        /// Find car by plate  , country  (PT)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCarByPlatePtAsync (string token, string plaque, string outputLang = null);

        /// <summary>
        /// Find car by plate  , country  (PT)
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByPlatePtAsyncWithHttpInfo (string token, string plaque, string outputLang = null);
        /// <summary>
        /// Find car by VIN
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="vin"> Your VIN (Vehicle Identification Number)</param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCarByVINAsync (string token, string vin, string outputLang = null);

        /// <summary>
        /// Find car by VIN
        /// </summary>
        /// <remarks>
        /// Return vehicle data from license plate
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="vin"> Your VIN (Vehicle Identification Number)</param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByVINAsyncWithHttpInfo (string token, string vin, string outputLang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CarInfoApi : ICarInfoApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CarInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CarInfoApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CarInfoApi"/> class
        /// </summary>
        /// <returns></returns>
        public CarInfoApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CarInfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CarInfoApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find car by plate  , country  (ES) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        public void GetCarByPlateEs (string token, string plaque, string outputLang = null)
        {
             GetCarByPlateEsWithHttpInfo(token, plaque, outputLang);
        }

        /// <summary>
        /// Find car by plate  , country  (ES) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCarByPlateEsWithHttpInfo (string token, string plaque, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByPlateEs");
            // verify the required parameter 'plaque' is set
            if (plaque == null)
                throw new ApiException(400, "Missing required parameter 'plaque' when calling CarInfoApi->GetCarByPlateEs");

            var localVarPath = "/v1/es/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (plaque != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plaque", plaque)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByPlateEs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find car by plate  , country  (ES) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCarByPlateEsAsync (string token, string plaque, string outputLang = null)
        {
             await GetCarByPlateEsAsyncWithHttpInfo(token, plaque, outputLang);

        }

        /// <summary>
        /// Find car by plate  , country  (ES) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByPlateEsAsyncWithHttpInfo (string token, string plaque, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByPlateEs");
            // verify the required parameter 'plaque' is set
            if (plaque == null)
                throw new ApiException(400, "Missing required parameter 'plaque' when calling CarInfoApi->GetCarByPlateEs");

            var localVarPath = "/v1/es/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (plaque != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plaque", plaque)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByPlateEs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find car by plate , country  (FR) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        public void GetCarByPlateFr (string token, string plaque, string outputLang = null)
        {
             GetCarByPlateFrWithHttpInfo(token, plaque, outputLang);
        }

        /// <summary>
        /// Find car by plate , country  (FR) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCarByPlateFrWithHttpInfo (string token, string plaque, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByPlateFr");
            // verify the required parameter 'plaque' is set
            if (plaque == null)
                throw new ApiException(400, "Missing required parameter 'plaque' when calling CarInfoApi->GetCarByPlateFr");

            var localVarPath = "/v1/fr/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (plaque != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plaque", plaque)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByPlateFr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find car by plate , country  (FR) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCarByPlateFrAsync (string token, string plaque, string outputLang = null)
        {
             await GetCarByPlateFrAsyncWithHttpInfo(token, plaque, outputLang);

        }

        /// <summary>
        /// Find car by plate , country  (FR) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByPlateFrAsyncWithHttpInfo (string token, string plaque, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByPlateFr");
            // verify the required parameter 'plaque' is set
            if (plaque == null)
                throw new ApiException(400, "Missing required parameter 'plaque' when calling CarInfoApi->GetCarByPlateFr");

            var localVarPath = "/v1/fr/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (plaque != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plaque", plaque)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByPlateFr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find car by plate  , country  (IT) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        public void GetCarByPlateIt (string token, string plaque, string outputLang = null)
        {
             GetCarByPlateItWithHttpInfo(token, plaque, outputLang);
        }

        /// <summary>
        /// Find car by plate  , country  (IT) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCarByPlateItWithHttpInfo (string token, string plaque, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByPlateIt");
            // verify the required parameter 'plaque' is set
            if (plaque == null)
                throw new ApiException(400, "Missing required parameter 'plaque' when calling CarInfoApi->GetCarByPlateIt");

            var localVarPath = "/v1/it/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (plaque != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plaque", plaque)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByPlateIt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find car by plate  , country  (IT) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCarByPlateItAsync (string token, string plaque, string outputLang = null)
        {
             await GetCarByPlateItAsyncWithHttpInfo(token, plaque, outputLang);

        }

        /// <summary>
        /// Find car by plate  , country  (IT) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByPlateItAsyncWithHttpInfo (string token, string plaque, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByPlateIt");
            // verify the required parameter 'plaque' is set
            if (plaque == null)
                throw new ApiException(400, "Missing required parameter 'plaque' when calling CarInfoApi->GetCarByPlateIt");

            var localVarPath = "/v1/it/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (plaque != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plaque", plaque)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByPlateIt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find car by plate  , country  (PT) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        public void GetCarByPlatePt (string token, string plaque, string outputLang = null)
        {
             GetCarByPlatePtWithHttpInfo(token, plaque, outputLang);
        }

        /// <summary>
        /// Find car by plate  , country  (PT) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCarByPlatePtWithHttpInfo (string token, string plaque, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByPlatePt");
            // verify the required parameter 'plaque' is set
            if (plaque == null)
                throw new ApiException(400, "Missing required parameter 'plaque' when calling CarInfoApi->GetCarByPlatePt");

            var localVarPath = "/v1/pt/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (plaque != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plaque", plaque)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByPlatePt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find car by plate  , country  (PT) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCarByPlatePtAsync (string token, string plaque, string outputLang = null)
        {
             await GetCarByPlatePtAsyncWithHttpInfo(token, plaque, outputLang);

        }

        /// <summary>
        /// Find car by plate  , country  (PT) Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="plaque">car plate </param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByPlatePtAsyncWithHttpInfo (string token, string plaque, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByPlatePt");
            // verify the required parameter 'plaque' is set
            if (plaque == null)
                throw new ApiException(400, "Missing required parameter 'plaque' when calling CarInfoApi->GetCarByPlatePt");

            var localVarPath = "/v1/pt/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (plaque != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plaque", plaque)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByPlatePt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find car by VIN Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="vin"> Your VIN (Vehicle Identification Number)</param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns></returns>
        public void GetCarByVIN (string token, string vin, string outputLang = null)
        {
             GetCarByVINWithHttpInfo(token, vin, outputLang);
        }

        /// <summary>
        /// Find car by VIN Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="vin"> Your VIN (Vehicle Identification Number)</param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCarByVINWithHttpInfo (string token, string vin, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByVIN");
            // verify the required parameter 'vin' is set
            if (vin == null)
                throw new ApiException(400, "Missing required parameter 'vin' when calling CarInfoApi->GetCarByVIN");

            var localVarPath = "/v1/vin/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (vin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vin", vin)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByVIN", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find car by VIN Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="vin"> Your VIN (Vehicle Identification Number)</param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCarByVINAsync (string token, string vin, string outputLang = null)
        {
             await GetCarByVINAsyncWithHttpInfo(token, vin, outputLang);

        }

        /// <summary>
        /// Find car by VIN Return vehicle data from license plate
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your token, use your real token or request a free token for fee here https://auto-ways.net/demo </param>
        /// <param name="vin"> Your VIN (Vehicle Identification Number)</param>
        /// <param name="outputLang">Define the API output language (fr,en) (optional, default to fr)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCarByVINAsyncWithHttpInfo (string token, string vin, string outputLang = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CarInfoApi->GetCarByVIN");
            // verify the required parameter 'vin' is set
            if (vin == null)
                throw new ApiException(400, "Missing required parameter 'vin' when calling CarInfoApi->GetCarByVIN");

            var localVarPath = "/v1/vin/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (vin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vin", vin)); // query parameter
            if (outputLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "output_lang", outputLang)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarByVIN", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}

/*
 * API Car plate - API Plaque immatriculation
 * Web Service which allows you to query the official database in real time by simply entering a license plate or a VIN. You allow your ecosystem to identify in one click the official data of a vehicle among the 80M license plates in France, Spain, Italy and Portugal.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@auto-ways.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CarInfoApi {
    private ApiClient apiClient;

    public CarInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CarInfoApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCarByPlateEs
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCarByPlateEsCall(String token, String plaque, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/es/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        if (plaque != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plaque", plaque));
        if (outputLang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("output_lang", outputLang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCarByPlateEsValidateBeforeCall(String token, String plaque, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCarByPlateEs(Async)");
        }
        // verify the required parameter 'plaque' is set
        if (plaque == null) {
            throw new ApiException("Missing the required parameter 'plaque' when calling getCarByPlateEs(Async)");
        }
        
        com.squareup.okhttp.Call call = getCarByPlateEsCall(token, plaque, outputLang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find car by plate  , country  (ES)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCarByPlateEs(String token, String plaque, String outputLang) throws ApiException {
        getCarByPlateEsWithHttpInfo(token, plaque, outputLang);
    }

    /**
     * Find car by plate  , country  (ES)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCarByPlateEsWithHttpInfo(String token, String plaque, String outputLang) throws ApiException {
        com.squareup.okhttp.Call call = getCarByPlateEsValidateBeforeCall(token, plaque, outputLang, null, null);
        return apiClient.execute(call);
    }

    /**
     * Find car by plate  , country  (ES) (asynchronously)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCarByPlateEsAsync(String token, String plaque, String outputLang, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCarByPlateEsValidateBeforeCall(token, plaque, outputLang, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCarByPlateFr
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCarByPlateFrCall(String token, String plaque, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/fr/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        if (plaque != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plaque", plaque));
        if (outputLang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("output_lang", outputLang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCarByPlateFrValidateBeforeCall(String token, String plaque, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCarByPlateFr(Async)");
        }
        // verify the required parameter 'plaque' is set
        if (plaque == null) {
            throw new ApiException("Missing the required parameter 'plaque' when calling getCarByPlateFr(Async)");
        }
        
        com.squareup.okhttp.Call call = getCarByPlateFrCall(token, plaque, outputLang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find car by plate , country  (FR)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCarByPlateFr(String token, String plaque, String outputLang) throws ApiException {
        getCarByPlateFrWithHttpInfo(token, plaque, outputLang);
    }

    /**
     * Find car by plate , country  (FR)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCarByPlateFrWithHttpInfo(String token, String plaque, String outputLang) throws ApiException {
        com.squareup.okhttp.Call call = getCarByPlateFrValidateBeforeCall(token, plaque, outputLang, null, null);
        return apiClient.execute(call);
    }

    /**
     * Find car by plate , country  (FR) (asynchronously)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCarByPlateFrAsync(String token, String plaque, String outputLang, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCarByPlateFrValidateBeforeCall(token, plaque, outputLang, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCarByPlateIt
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCarByPlateItCall(String token, String plaque, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/it/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        if (plaque != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plaque", plaque));
        if (outputLang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("output_lang", outputLang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCarByPlateItValidateBeforeCall(String token, String plaque, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCarByPlateIt(Async)");
        }
        // verify the required parameter 'plaque' is set
        if (plaque == null) {
            throw new ApiException("Missing the required parameter 'plaque' when calling getCarByPlateIt(Async)");
        }
        
        com.squareup.okhttp.Call call = getCarByPlateItCall(token, plaque, outputLang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find car by plate  , country  (IT)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCarByPlateIt(String token, String plaque, String outputLang) throws ApiException {
        getCarByPlateItWithHttpInfo(token, plaque, outputLang);
    }

    /**
     * Find car by plate  , country  (IT)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCarByPlateItWithHttpInfo(String token, String plaque, String outputLang) throws ApiException {
        com.squareup.okhttp.Call call = getCarByPlateItValidateBeforeCall(token, plaque, outputLang, null, null);
        return apiClient.execute(call);
    }

    /**
     * Find car by plate  , country  (IT) (asynchronously)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCarByPlateItAsync(String token, String plaque, String outputLang, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCarByPlateItValidateBeforeCall(token, plaque, outputLang, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCarByPlatePt
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCarByPlatePtCall(String token, String plaque, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/pt/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        if (plaque != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plaque", plaque));
        if (outputLang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("output_lang", outputLang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCarByPlatePtValidateBeforeCall(String token, String plaque, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCarByPlatePt(Async)");
        }
        // verify the required parameter 'plaque' is set
        if (plaque == null) {
            throw new ApiException("Missing the required parameter 'plaque' when calling getCarByPlatePt(Async)");
        }
        
        com.squareup.okhttp.Call call = getCarByPlatePtCall(token, plaque, outputLang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find car by plate  , country  (PT)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCarByPlatePt(String token, String plaque, String outputLang) throws ApiException {
        getCarByPlatePtWithHttpInfo(token, plaque, outputLang);
    }

    /**
     * Find car by plate  , country  (PT)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCarByPlatePtWithHttpInfo(String token, String plaque, String outputLang) throws ApiException {
        com.squareup.okhttp.Call call = getCarByPlatePtValidateBeforeCall(token, plaque, outputLang, null, null);
        return apiClient.execute(call);
    }

    /**
     * Find car by plate  , country  (PT) (asynchronously)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param plaque car plate  (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCarByPlatePtAsync(String token, String plaque, String outputLang, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCarByPlatePtValidateBeforeCall(token, plaque, outputLang, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCarByVIN
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param vin  Your VIN (Vehicle Identification Number) (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCarByVINCall(String token, String vin, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/vin/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));
        if (outputLang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("output_lang", outputLang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCarByVINValidateBeforeCall(String token, String vin, String outputLang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCarByVIN(Async)");
        }
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getCarByVIN(Async)");
        }
        
        com.squareup.okhttp.Call call = getCarByVINCall(token, vin, outputLang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find car by VIN
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param vin  Your VIN (Vehicle Identification Number) (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCarByVIN(String token, String vin, String outputLang) throws ApiException {
        getCarByVINWithHttpInfo(token, vin, outputLang);
    }

    /**
     * Find car by VIN
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param vin  Your VIN (Vehicle Identification Number) (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCarByVINWithHttpInfo(String token, String vin, String outputLang) throws ApiException {
        com.squareup.okhttp.Call call = getCarByVINValidateBeforeCall(token, vin, outputLang, null, null);
        return apiClient.execute(call);
    }

    /**
     * Find car by VIN (asynchronously)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  (required)
     * @param vin  Your VIN (Vehicle Identification Number) (required)
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCarByVINAsync(String token, String vin, String outputLang, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCarByVINValidateBeforeCall(token, vin, outputLang, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}

/**
 * API Car plate - API Plaque immatriculation
 * Web Service which allows you to query the official database in real time by simply entering a license plate or a VIN. You allow your ecosystem to identify in one click the official data of a vehicle among the 80M license plates in France, Spain, Italy and Portugal.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@auto-ways.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class CarInfoApi(basePath: kotlin.String = "https://app.auto-ways.net/api") : ApiClient(basePath) {

    /**
     * Find car by plate  , country  (ES)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  
     * @param plaque car plate  
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return void
     */
    fun getCarByPlateEs(token: kotlin.String, plaque: kotlin.String, outputLang: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("token" to listOf("$token"), "plaque" to listOf("$plaque"), "output_lang" to listOf("$outputLang"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/es/", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find car by plate , country  (FR)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  
     * @param plaque car plate  
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return void
     */
    fun getCarByPlateFr(token: kotlin.String, plaque: kotlin.String, outputLang: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("token" to listOf("$token"), "plaque" to listOf("$plaque"), "output_lang" to listOf("$outputLang"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/fr/", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find car by plate  , country  (IT)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  
     * @param plaque car plate  
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return void
     */
    fun getCarByPlateIt(token: kotlin.String, plaque: kotlin.String, outputLang: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("token" to listOf("$token"), "plaque" to listOf("$plaque"), "output_lang" to listOf("$outputLang"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/it/", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find car by plate  , country  (PT)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  
     * @param plaque car plate  
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return void
     */
    fun getCarByPlatePt(token: kotlin.String, plaque: kotlin.String, outputLang: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("token" to listOf("$token"), "plaque" to listOf("$plaque"), "output_lang" to listOf("$outputLang"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/pt/", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find car by VIN
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo  
     * @param vin  Your VIN (Vehicle Identification Number) 
     * @param outputLang Define the API output language (fr,en) (optional, default to fr)
     * @return void
     */
    fun getCarByVIN(token: kotlin.String, vin: kotlin.String, outputLang: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("token" to listOf("$token"), "vin" to listOf("$vin"), "output_lang" to listOf("$outputLang"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/vin/", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}

/**
 * API Car plate - API Plaque immatriculation
 * Web Service which allows you to query the official database in real time by simply entering a license plate or a VIN. You allow your ecosystem to identify in one click the official data of a vehicle among the 80M license plates in France, Spain, Italy and Portugal.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@auto-ways.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CarInfoService {

    protected basePath = 'https://app.auto-ways.net/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Find car by plate  , country  (ES)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param plaque car plate 
     * @param outputLang Define the API output language (fr,en)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCarByPlateEs(token: string, plaque: string, outputLang?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCarByPlateEs(token: string, plaque: string, outputLang?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCarByPlateEs(token: string, plaque: string, outputLang?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCarByPlateEs(token: string, plaque: string, outputLang?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getCarByPlateEs.');
        }

        if (plaque === null || plaque === undefined) {
            throw new Error('Required parameter plaque was null or undefined when calling getCarByPlateEs.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (plaque !== undefined && plaque !== null) {
            queryParameters = queryParameters.set('plaque', <any>plaque);
        }
        if (outputLang !== undefined && outputLang !== null) {
            queryParameters = queryParameters.set('output_lang', <any>outputLang);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/v1/es/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find car by plate , country  (FR)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param plaque car plate 
     * @param outputLang Define the API output language (fr,en)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCarByPlateFr(token: string, plaque: string, outputLang?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCarByPlateFr(token: string, plaque: string, outputLang?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCarByPlateFr(token: string, plaque: string, outputLang?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCarByPlateFr(token: string, plaque: string, outputLang?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getCarByPlateFr.');
        }

        if (plaque === null || plaque === undefined) {
            throw new Error('Required parameter plaque was null or undefined when calling getCarByPlateFr.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (plaque !== undefined && plaque !== null) {
            queryParameters = queryParameters.set('plaque', <any>plaque);
        }
        if (outputLang !== undefined && outputLang !== null) {
            queryParameters = queryParameters.set('output_lang', <any>outputLang);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/v1/fr/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find car by plate  , country  (IT)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param plaque car plate 
     * @param outputLang Define the API output language (fr,en)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCarByPlateIt(token: string, plaque: string, outputLang?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCarByPlateIt(token: string, plaque: string, outputLang?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCarByPlateIt(token: string, plaque: string, outputLang?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCarByPlateIt(token: string, plaque: string, outputLang?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getCarByPlateIt.');
        }

        if (plaque === null || plaque === undefined) {
            throw new Error('Required parameter plaque was null or undefined when calling getCarByPlateIt.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (plaque !== undefined && plaque !== null) {
            queryParameters = queryParameters.set('plaque', <any>plaque);
        }
        if (outputLang !== undefined && outputLang !== null) {
            queryParameters = queryParameters.set('output_lang', <any>outputLang);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/v1/it/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find car by plate  , country  (PT)
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param plaque car plate 
     * @param outputLang Define the API output language (fr,en)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCarByPlatePt(token: string, plaque: string, outputLang?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCarByPlatePt(token: string, plaque: string, outputLang?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCarByPlatePt(token: string, plaque: string, outputLang?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCarByPlatePt(token: string, plaque: string, outputLang?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getCarByPlatePt.');
        }

        if (plaque === null || plaque === undefined) {
            throw new Error('Required parameter plaque was null or undefined when calling getCarByPlatePt.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (plaque !== undefined && plaque !== null) {
            queryParameters = queryParameters.set('plaque', <any>plaque);
        }
        if (outputLang !== undefined && outputLang !== null) {
            queryParameters = queryParameters.set('output_lang', <any>outputLang);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/v1/pt/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find car by VIN
     * Return vehicle data from license plate
     * @param token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo 
     * @param vin  Your VIN (Vehicle Identification Number)
     * @param outputLang Define the API output language (fr,en)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCarByVIN(token: string, vin: string, outputLang?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCarByVIN(token: string, vin: string, outputLang?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCarByVIN(token: string, vin: string, outputLang?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCarByVIN(token: string, vin: string, outputLang?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getCarByVIN.');
        }

        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getCarByVIN.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (vin !== undefined && vin !== null) {
            queryParameters = queryParameters.set('vin', <any>vin);
        }
        if (outputLang !== undefined && outputLang !== null) {
            queryParameters = queryParameters.set('output_lang', <any>outputLang);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/v1/vin/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

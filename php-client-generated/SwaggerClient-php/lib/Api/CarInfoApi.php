<?php
/**
 * CarInfoApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Car plate - API Plaque immatriculation
 *
 * Web Service which allows you to query the official database in real time by simply entering a license plate or a VIN. You allow your ecosystem to identify in one click the official data of a vehicle among the 80M license plates in France, Spain, Italy and Portugal.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@auto-ways.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CarInfoApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CarInfoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCarByPlateEs
     *
     * Find car by plate  , country  (ES)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCarByPlateEs($token, $plaque, $output_lang = 'fr')
    {
        $this->getCarByPlateEsWithHttpInfo($token, $plaque, $output_lang);
    }

    /**
     * Operation getCarByPlateEsWithHttpInfo
     *
     * Find car by plate  , country  (ES)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarByPlateEsWithHttpInfo($token, $plaque, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByPlateEsRequest($token, $plaque, $output_lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getCarByPlateEsAsync
     *
     * Find car by plate  , country  (ES)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByPlateEsAsync($token, $plaque, $output_lang = 'fr')
    {
        return $this->getCarByPlateEsAsyncWithHttpInfo($token, $plaque, $output_lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarByPlateEsAsyncWithHttpInfo
     *
     * Find car by plate  , country  (ES)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByPlateEsAsyncWithHttpInfo($token, $plaque, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByPlateEsRequest($token, $plaque, $output_lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarByPlateEs'
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCarByPlateEsRequest($token, $plaque, $output_lang = 'fr')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCarByPlateEs'
            );
        }
        // verify the required parameter 'plaque' is set
        if ($plaque === null || (is_array($plaque) && count($plaque) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plaque when calling getCarByPlateEs'
            );
        }

        $resourcePath = '/v1/es/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }
        // query params
        if ($plaque !== null) {
            $queryParams['plaque'] = ObjectSerializer::toQueryValue($plaque, null);
        }
        // query params
        if ($output_lang !== null) {
            $queryParams['output_lang'] = ObjectSerializer::toQueryValue($output_lang, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarByPlateFr
     *
     * Find car by plate , country  (FR)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCarByPlateFr($token, $plaque, $output_lang = 'fr')
    {
        $this->getCarByPlateFrWithHttpInfo($token, $plaque, $output_lang);
    }

    /**
     * Operation getCarByPlateFrWithHttpInfo
     *
     * Find car by plate , country  (FR)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarByPlateFrWithHttpInfo($token, $plaque, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByPlateFrRequest($token, $plaque, $output_lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getCarByPlateFrAsync
     *
     * Find car by plate , country  (FR)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByPlateFrAsync($token, $plaque, $output_lang = 'fr')
    {
        return $this->getCarByPlateFrAsyncWithHttpInfo($token, $plaque, $output_lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarByPlateFrAsyncWithHttpInfo
     *
     * Find car by plate , country  (FR)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByPlateFrAsyncWithHttpInfo($token, $plaque, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByPlateFrRequest($token, $plaque, $output_lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarByPlateFr'
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCarByPlateFrRequest($token, $plaque, $output_lang = 'fr')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCarByPlateFr'
            );
        }
        // verify the required parameter 'plaque' is set
        if ($plaque === null || (is_array($plaque) && count($plaque) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plaque when calling getCarByPlateFr'
            );
        }

        $resourcePath = '/v1/fr/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }
        // query params
        if ($plaque !== null) {
            $queryParams['plaque'] = ObjectSerializer::toQueryValue($plaque, null);
        }
        // query params
        if ($output_lang !== null) {
            $queryParams['output_lang'] = ObjectSerializer::toQueryValue($output_lang, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarByPlateIt
     *
     * Find car by plate  , country  (IT)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCarByPlateIt($token, $plaque, $output_lang = 'fr')
    {
        $this->getCarByPlateItWithHttpInfo($token, $plaque, $output_lang);
    }

    /**
     * Operation getCarByPlateItWithHttpInfo
     *
     * Find car by plate  , country  (IT)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarByPlateItWithHttpInfo($token, $plaque, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByPlateItRequest($token, $plaque, $output_lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getCarByPlateItAsync
     *
     * Find car by plate  , country  (IT)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByPlateItAsync($token, $plaque, $output_lang = 'fr')
    {
        return $this->getCarByPlateItAsyncWithHttpInfo($token, $plaque, $output_lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarByPlateItAsyncWithHttpInfo
     *
     * Find car by plate  , country  (IT)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByPlateItAsyncWithHttpInfo($token, $plaque, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByPlateItRequest($token, $plaque, $output_lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarByPlateIt'
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCarByPlateItRequest($token, $plaque, $output_lang = 'fr')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCarByPlateIt'
            );
        }
        // verify the required parameter 'plaque' is set
        if ($plaque === null || (is_array($plaque) && count($plaque) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plaque when calling getCarByPlateIt'
            );
        }

        $resourcePath = '/v1/it/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }
        // query params
        if ($plaque !== null) {
            $queryParams['plaque'] = ObjectSerializer::toQueryValue($plaque, null);
        }
        // query params
        if ($output_lang !== null) {
            $queryParams['output_lang'] = ObjectSerializer::toQueryValue($output_lang, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarByPlatePt
     *
     * Find car by plate  , country  (PT)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCarByPlatePt($token, $plaque, $output_lang = 'fr')
    {
        $this->getCarByPlatePtWithHttpInfo($token, $plaque, $output_lang);
    }

    /**
     * Operation getCarByPlatePtWithHttpInfo
     *
     * Find car by plate  , country  (PT)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarByPlatePtWithHttpInfo($token, $plaque, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByPlatePtRequest($token, $plaque, $output_lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getCarByPlatePtAsync
     *
     * Find car by plate  , country  (PT)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByPlatePtAsync($token, $plaque, $output_lang = 'fr')
    {
        return $this->getCarByPlatePtAsyncWithHttpInfo($token, $plaque, $output_lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarByPlatePtAsyncWithHttpInfo
     *
     * Find car by plate  , country  (PT)
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByPlatePtAsyncWithHttpInfo($token, $plaque, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByPlatePtRequest($token, $plaque, $output_lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarByPlatePt'
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $plaque car plate (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCarByPlatePtRequest($token, $plaque, $output_lang = 'fr')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCarByPlatePt'
            );
        }
        // verify the required parameter 'plaque' is set
        if ($plaque === null || (is_array($plaque) && count($plaque) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plaque when calling getCarByPlatePt'
            );
        }

        $resourcePath = '/v1/pt/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }
        // query params
        if ($plaque !== null) {
            $queryParams['plaque'] = ObjectSerializer::toQueryValue($plaque, null);
        }
        // query params
        if ($output_lang !== null) {
            $queryParams['output_lang'] = ObjectSerializer::toQueryValue($output_lang, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarByVIN
     *
     * Find car by VIN
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $vin Your VIN (Vehicle Identification Number) (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCarByVIN($token, $vin, $output_lang = 'fr')
    {
        $this->getCarByVINWithHttpInfo($token, $vin, $output_lang);
    }

    /**
     * Operation getCarByVINWithHttpInfo
     *
     * Find car by VIN
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $vin Your VIN (Vehicle Identification Number) (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarByVINWithHttpInfo($token, $vin, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByVINRequest($token, $vin, $output_lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getCarByVINAsync
     *
     * Find car by VIN
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $vin Your VIN (Vehicle Identification Number) (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByVINAsync($token, $vin, $output_lang = 'fr')
    {
        return $this->getCarByVINAsyncWithHttpInfo($token, $vin, $output_lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarByVINAsyncWithHttpInfo
     *
     * Find car by VIN
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $vin Your VIN (Vehicle Identification Number) (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarByVINAsyncWithHttpInfo($token, $vin, $output_lang = 'fr')
    {
        $returnType = '';
        $request = $this->getCarByVINRequest($token, $vin, $output_lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarByVIN'
     *
     * @param  string $token Your token, use your real token or request a free token for fee here https://auto-ways.net/demo (required)
     * @param  string $vin Your VIN (Vehicle Identification Number) (required)
     * @param  string $output_lang Define the API output language (fr,en) (optional, default to fr)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCarByVINRequest($token, $vin, $output_lang = 'fr')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCarByVIN'
            );
        }
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling getCarByVIN'
            );
        }

        $resourcePath = '/v1/vin/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }
        // query params
        if ($vin !== null) {
            $queryParams['vin'] = ObjectSerializer::toQueryValue($vin, null);
        }
        // query params
        if ($output_lang !== null) {
            $queryParams['output_lang'] = ObjectSerializer::toQueryValue($output_lang, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
